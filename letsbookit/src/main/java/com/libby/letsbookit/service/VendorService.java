package com.libby.letsbookit.service;

import com.libby.letsbookit.model.Vendor;
import com.libby.letsbookit.repositories.VendorRepository;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * VendorService Class provides the business logic for the client to interact with the database.
 */
@Service
public class VendorService {

  // connects to the repository
  @Autowired
  private VendorRepository vendorRepository;

  /**
   * Saves a Vendor to the database in the vendors table.
   *
   * @param vendor The Vendor object to add to the vendors table in the database.
   * @return The vendor saved to the database, which includes the autogenerated id.
   */
  public Vendor addVendor(Vendor vendor) {
    return this.vendorRepository.save(vendor);
  }

  /**
   * Provides the business logic to get all vendors from the database.
   *
   * @return A list of all vendors in the database.
   */
  public List<Vendor> getAllVendors() {return(List<Vendor>) this.vendorRepository.findAll();}

  /**
   * Provides the business logic to get a vendor from the database, when given the id, or primary
   * key, of the vendor.
   *
   * @param id the primary key, unique id of the vendor.
   * @return The vendor of the assigned id number.
   */
  public Vendor getVendorById(Integer id) {
    Optional<Vendor> vendor = this.vendorRepository.findById(id);
    return vendor.get();
  }

  /**
   * Updates a vendor's information from the database.
   *
   * @param id The id of the vendor saved in the database, which be used to fetch the vendor record
   *           to be updated in the database.
   * @param vendor The vendor with the updated information.
   * @return The vendor with the updated information.
   */
  public Vendor updateVendor(Integer id, Vendor vendor) {
    Vendor fromDB = this.getVendorById(id);
    fromDB.setName(vendor.getName());
    fromDB.setDescription(vendor.getDescription());
    fromDB.setContactNumber(vendor.getContactNumber());
    fromDB.setContactEmail(vendor.getContactEmail());
    fromDB.setWebsite(vendor.getWebsite());
    fromDB.setSocialMedia(vendor.getSocialMedia());
    this.vendorRepository.save(fromDB);
    return fromDB;
  }


  /**
   * Deletes a vendor from the database.
   *
   * @param id The id of the vendor to be deleted from the database.
   */
  public void deleteVendor(Integer id) {this.vendorRepository.deleteById(id);}

}
