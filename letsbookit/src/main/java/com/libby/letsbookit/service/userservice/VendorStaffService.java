package com.libby.letsbookit.service.userservice;

import com.libby.letsbookit.model.User.User;
import com.libby.letsbookit.model.User.VendorStaff;
import com.libby.letsbookit.repositories.userrepository.UserBaseRepository;
import com.libby.letsbookit.repositories.userrepository.VendorStaffRepository;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

/**
 * Subtype class that inherits from abstract class UserService.
 */
@Service
public class VendorStaffService extends UserService {

  // connects to the repository
  @Qualifier("vendorStaffRepository")
  @Autowired
  private UserBaseRepository userBaseRepository;

  @Autowired
  private VendorStaffRepository vendorStaffRepository;

  // POST methods

  /**
   * Saves a new VendorStaff created by the client.
   *
   * @param user The user to be added to the database.
   * @return On successful addition, the user added to the database and the user with
   * the autogenerated id.
   */
  public VendorStaff saveVendorStaff(VendorStaff user) {
    return (VendorStaff) this.userBaseRepository.save(user);
  }

  // PUT methods

  /**
   * User adds relation to Vendor object.
   *
   * @param id The id of the VendorStaff to be updated.
   * @param vendorId The id of the Vendor object.
   * @return The Vendor associated with the user.
   */
  public Object userToVendor(Integer id, Integer vendorId) {
    // TODO: put logic here
    return null;
  }

  /**
   * Update user information, the fields in the VendorStaff data model.
   *
   * @param id The id of the VendorStaff to retrieve record from the database to update.
   * @param user The new user information to update in the database.
   * @return Returns the VendorStaff with updated information.
   */
  public VendorStaff updateUser(Integer id, VendorStaff user) {
    VendorStaff fromDB = this.getById(id);
    fromDB.setUsername(user.getUsername());
    fromDB.setPassword(user.getPassword());
    fromDB.setFirstName(user.getFirstName());
    fromDB.setLastName(user.getLastName());
    fromDB.setEmail(user.getEmail());
    fromDB.setDateOfBirth(user.getDateOfBirth());
    fromDB.setRole(user.getRole());
    this.userBaseRepository.save(fromDB);
    return fromDB;
  }

  /**
   * Gets vendor staff by id.
   *
   * @param id The primary key, unique id of the user.
   * @return The user with the given id.
   */
  public VendorStaff getById(Integer id) {
    Optional<VendorStaff> vendorOptional = this.vendorStaffRepository.findById(id);
    return vendorOptional.get();
  }

  /**
   * Gets all vendor staff users.
   *
   * @return A list of all vendor staff in the database.
   */
  public List<VendorStaff> getAllVendorStaff() {
    return this.userBaseRepository.findAll();
  }

  @Override
  public void deleteUser(Integer id) {
    this.vendorStaffRepository.deleteById(id);
  }
}
