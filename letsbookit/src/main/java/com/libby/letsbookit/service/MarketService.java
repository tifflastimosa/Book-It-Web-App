package com.libby.letsbookit.service;

import com.libby.letsbookit.model.Frequencies;
import com.libby.letsbookit.model.Market;
import com.libby.letsbookit.repositories.MarketRepository;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * MarketService Class provides the business logic for the client to interact with the database.
 */
@Service
public class MarketService {

  // connects to the repository
  @Autowired
  private MarketRepository marketRepository;

  /**
   * Adds a new market to the database.
   *
   * @param market The Market object to be added to the database.
   * @return A new Market with the autogenerated id.
   */
  public Market addMarket(Market market) {
    return this.marketRepository.save(market);
  }

  /**
   * The Market to add to the database.
   *
   * @param id The primary key, unique id of the market.
   * @param market The Market object with the updated information.
   * @return The Market with the updated information.
   */
  public Market updateMarket(Integer id, Market market) {
    Market fromDB = this.findMarketById(id);
    fromDB.setName(market.getName());
    fromDB.setDescription(market.getDescription());
    fromDB.setFrequency(market.getFrequency());
    fromDB.setContactNumber(market.getContactNumber());
    fromDB.setContactEmail(market.getContactEmail());
    fromDB.setWebsite(market.getWebsite());
    fromDB.setSocialMedia(market.getSocialMedia());
    return this.marketRepository.save(fromDB);
  }

  /**
   * Gets a market when given an id.
   *
   * @param id The primary key, unique id of the market.
   * @return The market of the assigned id number.
   */
  public Market findMarketById(Integer id) {
    Optional<Market> market = this.marketRepository.findById(id);
    return market.get();
  }

  /**
   * Provides the business logic to delete a market from the database, when given the id,
   * or primary key of the market.
   *
   * @param id the primary key, unique id of the market.
   */
  public void deleteMarket(Integer id) {
    this.marketRepository.deleteById(id);
  }

  /**
   * Provides the business logic to get all markets from the database.
   *
   * @return A list of all markets in the database.
   */
  public List<Market> getALlMarkets() {
    return (List<Market>) this.marketRepository.findAll();
  }


}
