package com.libby.letsbookit.service;

import com.libby.letsbookit.model.Event;
import com.libby.letsbookit.model.Stand;
import com.libby.letsbookit.model.Vendor;
import com.libby.letsbookit.repositories.EventRepository;
import com.libby.letsbookit.repositories.StandRepository;
import com.libby.letsbookit.repositories.VendorRepository;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * StandService Class provides business logic for the client to interact with the database.
 */
@Service
public class StandService {

  // connects to the repository
  @Autowired
  private StandRepository standRepository;

  @Autowired
  private EventService eventService;

  @Autowired
  private VendorService vendorService;

  private Float validatePrice(Float price) {
    if (price < 0.0f) {
      return 0.0f;
    }
    return price;
  }

  // POST Request

  /**
   * Provides the business logic to create a stand object and then adds it as a record to the
   * database.
   *
   * @param stand The new stand object to add to the database.
   * @return The new stand with the autogenerated id.
   */
  public Stand addStand(Integer eventId,Stand stand) {
    stand.setEvent(this.eventService.getById(eventId));
    return this.standRepository.save(stand);
  }

  // GET Requests

  /**
   * Retrieves all stands from the database.
   *
   * @return A list of all stands in the database.
   */
  public List<Stand> getAllStands() {
    return (List<Stand>) this.standRepository.findAll();
  }

  /**
   * Retrieves a stand from the database, when given the id, or primary key, of the stand.
   *
   * @param id The unique id/primary key of the stand.
   * @return The stand of the given id number.
   */
  public Stand getStandyById(Integer id) {
    Optional<Stand> stand = this.standRepository.findById(id);
    return stand.get();
  }

  /**
   * Retrieves the stand to be updated from the database and updates the stand's information from the
   * parameter.
   *
   * @param id The unique id/primary key of the stand.
   * @param stand The stand object with updated information.
   * @return The new stand
   */
  public Stand updateStand(Integer id, Stand stand) {
    Stand fromDB = this.getStandyById(id);
    fromDB.setId(id);
    fromDB.setName(stand.getName());
    fromDB.setNotes(stand.getNotes());
    fromDB.setBooked(stand.getBooked());
    fromDB.setPrice(stand.getPrice());
    fromDB.setEvent(stand.getEvent());
    fromDB.setVendor(stand.getVendor());
    return this.standRepository.save(fromDB);
  }



  /**
   * Deletes a stand from the database when given the unique id/primary key of the stand.
   *
   * @param id the primary key, unique id of the stand.
   */
  public void deleteStand(Integer id) {
    this.standRepository.deleteById(id);
  }


}
