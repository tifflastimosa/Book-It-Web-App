package com.libby.letsbookit.service;

import com.libby.letsbookit.model.Event;
import com.libby.letsbookit.model.Stand;
import com.libby.letsbookit.model.Vendor;
import com.libby.letsbookit.repositories.EventRepository;
import com.libby.letsbookit.repositories.StandRepository;
import com.libby.letsbookit.repositories.VendorRepository;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * StandService Class provides business logic for the client to interact with the database.
 */
@Service
public class StandService {

  // connects to the repository
  @Autowired
  private StandRepository standRepository;

  @Autowired
  private EventRepository eventRepository;

  @Autowired
  private VendorRepository vendorRepository;

  /**
   * Provides the business logic to create a stand object and then adds it as a record to the
   * database.
   *
   * @param name the table name that helps identify the stand.
   * @param notes the table notes that describe the stand.
   * @param booked the booked status of the stand.
   * @param price the price it costs to rent the stand.
   * @param event the event the stand belongs to.
   * @param vendor the vendor that has booked the stand.
   * @return The autogenerated id of the market.
   */
  public Integer createStand(String name, String notes, Boolean booked,
                             Float price, Event event, Vendor vendor) {
    Stand stand = new Stand(name, notes, booked, price, event, vendor);
    this.standRepository.save(stand);
    return stand.getId();
  }


  /**
   * Provides the business logic to update the stand object in the database.
   *
   * @param id the primary key, unique id of the stand.
   * @param name the table name that helps identify the stand.
   * @param notes the table notes that describe the stand.
   * @param booked the booked status of the stand.
   * @param price the price it costs to rent the stand.
   * @param event the event the stand belongs to.
   * @param vendor the vendor that has booked the stand.
   * @return The autogenerated id of the stand.
   */
  public Integer updateStand(Integer id, String name,
      String notes, Boolean booked, Float price, Event event, Vendor vendor) {
    Stand stand = (Stand) this.findStandById(id);
    stand.setId(id);
    stand.setName(name);
    stand.setNotes(notes);
    stand.setBooked(booked);
    stand.setPrice(price);
    stand.setEvent(event);
    stand.setVendor(vendor);
    this.standRepository.save(stand);
    return stand.getId();
  }

  /**
   * Provides the business logic to get a stand from the database, when given the id, or primary
   * key, of the stand.
   *
   * @param id the primary key, unique id of the stand.
   * @return The stand of the assigned id number.
   */
  public Stand findStandById(Integer id) {
    Optional<Stand> stand = this.standRepository.findById(id);
    return stand.get();
  }

  /**
   * Provides the business logic to delete a stand from the database, when given the id,
   * or primary key of the stand.
   *
   * @param id the primary key, unique id of the stand.
   */
  public void deleteStand(Integer id) {
    this.standRepository.deleteById(id);
  }

  /**
   * Provides the business logic to get all stands from the database.
   *
   * @return A list of all stands in the database.
   */
  public List<Stand> findAllStands() {
    return (List<Stand>) this.standRepository.findAll();
  }
}
