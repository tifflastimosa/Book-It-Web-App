package com.libby.letsbookit.daos.userservice;

import com.libby.letsbookit.model.User.Roles;
import com.libby.letsbookit.model.User.User;
import java.util.List;
import org.springframework.stereotype.Component;

/**
 * Interface for abstract class UserService to ensure that subtype classes that inherit from
 * UserService to use the required methods.
 */
@Component
public interface IUserService {

  /**
   * Provides the business logic to create a user object and then add it as a record to the
   * database.
   *
   * @param username the username of the user creating a new user account.
   * @param password the password of the user.
   * @param firstName the first name of the user.
   * @param lastName the last name of the user.
   * @param email the email of the user.
   * @param dateOfBirth the date of birth of the user.
   * @param role the role of the user.
   * @return The autogenerated id of the user.
   */
  Integer associateUser(String username, String password, String firstName, String lastName,
      String email, String dateOfBirth, Roles role, Integer marketId) throws Exception;

  /**
   * Provides the business logic to get all users from the database.
   *
   * @return A list of all users in the database.
   */
  List<User> getAll();

  /**
   * Provides the business logic to get a user from the database, when given the id, or primary
   * key, of the user.
   *
   * @param id the primary key, unique id of the user.
   * @return The user of the assigned id number.
   */
  User getById(Integer id);

  /**
   * Provides the business logic to update a user's information from the database, when given the
   * id, or primary key, of the user.
   *
   * @param id the primary key, unique id of the user.
   * @param username the username of the user creating a new user account.
   * @param password the password of the user.
   * @param firstName the first name of the user.
   * @param lastName the last name of the user.
   * @param email the email of the user.
   * @param dateOfBirth the date of birth of the user.
   * @param role the role of the user.
   * @return The id of the user.
   */
  Integer updateUser(Integer id, String username, String password, String firstName, String lastName,
      String email, String dateOfBirth, Roles role);

  /**
   * Provides the business logic to delete a user from the database, when given the id, or primary
   * key of the user.
   *
   * @param id the primary key, unique id of the user.
   */
  void deleteUser(Integer id);

}
