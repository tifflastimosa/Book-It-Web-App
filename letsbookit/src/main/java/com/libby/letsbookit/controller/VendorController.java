package com.libby.letsbookit.controller;

import com.libby.letsbookit.model.Vendor;
import com.libby.letsbookit.service.VendorService;
import java.util.List;
import javax.validation.constraints.Positive;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * VendorController class provides CRUD requests for the client to interact with the database.
 */
@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/vendors")
public class VendorController {

  // connect with the service layer
  @Autowired
  private VendorService vendorService;

  // POST Request

  /**
   * Adds a new Vendor to the database through a JSON objected requested by the client.
   *
   * @param vendor The vendor to be added to the database.
   * @return A new vendor with an autogenerated id and the Http status. On successful addition of a
   * new vendor receive a 200 ok response, on failure addition of a new vendor receive 400 bad
   * request.
   */
  @PostMapping(value = "/add-vendor")
  public ResponseEntity<Vendor> addVendor(@RequestBody Vendor vendor) {
    try {
      return new ResponseEntity<>(this.vendorService.addVendor(vendor), HttpStatus.CREATED);
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
  }

  // GET Requests

  /**
   * Gets all vendors from the database.
   *
   * @return Returns HTTP status, if the request is good or bad, and also returns a list of all
   * vendors in the database.
   */
  @GetMapping
  public ResponseEntity<List<Vendor>> getAllVendors() {
    try {
      List<Vendor> vendors = this.vendorService.getAllVendors();
      if (!vendors.isEmpty()) {
        return new ResponseEntity<>(vendors, HttpStatus.OK);
      }
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
    return new ResponseEntity<>(HttpStatus.NO_CONTENT);
  }

  /**
   * Gets a vendor from the database when given an id.
   *
   * @param id the autogenerated id of the vendor
   * @return Returns HTTP status, if the request is good or bad, and also returns the vendor if a
   * successful request.
   */
  @GetMapping(value = "/{id}")
  public ResponseEntity<Vendor> getVendor(@PathVariable Integer id) {
    Vendor vendor = this.vendorService.getVendorById(id);
    if (vendor != null) {
      return new ResponseEntity<>(vendor, HttpStatus.OK);
    } else {
      return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
  }

  // PUT Request

  /**
   * Updates a vendor from the database when given an id.
   *
   * @param id The primary key, unique id of the vendor.
   * @param vendor The Vendor data model containing new information to update
   * @return The vendor with the updated information.
   */
  @PutMapping(value = "/update/{id}")
  public ResponseEntity<Vendor> updateVendor(@PathVariable("id") @Positive Integer id,
                                             @RequestBody Vendor vendor) {
    try {
      return new ResponseEntity<>(this.vendorService.updateVendor(id, vendor), HttpStatus.OK);
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
  }

  // DELETE Request

  /**
   * Deletes a vendor from the database when given an id.
   *
   * @param id the primary key, unique id of the vendor.
   * @return Returns the HTTP status, on successful delete returns 401 status, otherwise on failure
   * returns 400 bad request.
   */
  @DeleteMapping(value = "/delete/{id}")
  public ResponseEntity<HttpStatus> deleteVendor(@PathVariable("id") Integer id) {
    try {
      this.vendorService.deleteVendor(id);
      return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
  }

}
