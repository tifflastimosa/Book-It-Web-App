package com.libby.letsbookit.controller;


import com.libby.letsbookit.model.Market;
import com.libby.letsbookit.model.User.MarketStaff;
import com.libby.letsbookit.service.MarketService;
import com.libby.letsbookit.service.userservice.IUserService;
import com.libby.letsbookit.service.userservice.MarketStaffService;
import com.libby.letsbookit.model.User.User;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * UserController class provides CRUD requests for the client to interact with the database.
 */
@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/users")
public class UserController {

  // connect with the service layer
  @Autowired
  private IUserService userService;
  
  @Autowired
  private MarketStaffService marketStaffService;

  @Autowired
  private MarketService marketService;

  // POST Request

  /**
   * Adds a new user to the database through a JSON object requested by the client.
   *
   * @param user The new user to be added to the database.
   * @return A new user with an autogenerated id and the Http status. On successful addition of a
   * new user receive a 200 ok response, on failure addition of a new user receive 400 bad request.
   */
  @PostMapping(value = "/add-user")
  public ResponseEntity<User> createUserNoMarket(@RequestBody MarketStaff user) {
    try {
      // TODO: validate the user date of birth format
      return new ResponseEntity<>(this.marketStaffService.saveUser(user), HttpStatus.OK);
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
  }

  // PUT Request

  /**
   * A user updates relationship where a MarketStaff is associated to 1 Market.
   *
   * @param id The id of the user to be associated with the Market object.
   * @param marketId The id of the Market object.
   * @return The Market assigned to the MarketStaff.
   */
  @PutMapping(value = "/{id}/{market_id}")
  public ResponseEntity<Market> userAddsExistingMarket(@PathVariable("id") Integer id,
                                                        @PathVariable("market_id") Integer marketId) {
    try {
      return new ResponseEntity<>(
          this.marketStaffService.userToMarket(id, marketId), HttpStatus.OK);
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
  }

  /**
   * Makes Http request to the MarketStaff Service layer to update user information.
   *
   * @param id The id of the record
   * @param user The new user information to update in the database.
   * @return Returns the MarketStaff with updated information.
   */
  @PutMapping(value = "/update/{id}")
  public ResponseEntity<MarketStaff> updateUser(@PathVariable("id") Integer id,
                                            @RequestBody MarketStaff user) {
    try {
      return new ResponseEntity<>(this.marketStaffService.updateUser(id, user), HttpStatus.OK);
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
  }

  // GET Requests
  /**
   * Gets all users from the database.
   *
   * @return Returns HTTP status, if the request is good or bad, and also returns a list of all
   * users in the database.
   */
  @GetMapping(value = "/all")
  public ResponseEntity<List<User>> getAllUsers() {
    List<User> users = this.userService.getAll();
    if (!users.isEmpty()) {
      return new ResponseEntity<>(users, HttpStatus.OK);
    } else {
      return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
  }

  /**
   * Gets a user from the database when given an id.
   *
   * @param id the autogenerated id of the user.
   * @return Returns HTTP status, if the request is good or bad, and also returns a list of all
   * users in the database.
   */
  @GetMapping(value = "/{id}")
  public ResponseEntity<User> getUser(@PathVariable Integer id) {
    User user = this.userService.getById(id);
    if (user != null) {
      return new ResponseEntity<>(user, HttpStatus.OK);
    } else {
      return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
  }

  // DELETE Request
  /**
   * Deletes a user from the database when given an id.
   *
   * @param id the primary key, unique id of the user.
   * @return Returns HTTP status, if the request is good or bad.
   */
  @DeleteMapping(value = "/delete/{id}")
  public ResponseEntity<HttpStatus> deletePlace(@PathVariable("id") Integer id) {
    try {
      this.userService.deleteUser(id);
      return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
  }

}
