package com.libby.letsbookit.controller;


import com.libby.letsbookit.model.Market;
import com.libby.letsbookit.model.User.MarketStaff;
import com.libby.letsbookit.model.User.VendorStaff;
import com.libby.letsbookit.service.MarketService;
import com.libby.letsbookit.service.userservice.IUserService;
import com.libby.letsbookit.service.userservice.MarketStaffService;
import com.libby.letsbookit.model.User.User;
import com.libby.letsbookit.service.userservice.VendorStaffService;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.Min;
import javax.validation.constraints.Positive;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * UserController class provides CRUD requests for the client to interact with the database.
 */
@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/users")
public class UserController {

  // connect with the service layer
  @Autowired
  private IUserService userService;
  
  @Autowired
  private MarketStaffService marketStaffService;

  @Autowired
  private MarketService marketService;

  @Autowired
  private VendorStaffService vendorStaffService;
  // POST Request

  /**
   * Client request to add a new user to the database through a JSON.
   *
   * @param user The new user to be added to the database.
   * @return A new user with an autogenerated id and the Http status. On successful addition of a
   * new user receive a 200 ok response, on failure addition of a new user receive 400 bad request.
   */
  @PostMapping(value = "/add-user-market")
  public ResponseEntity<User> addUserMarket(@RequestBody MarketStaff user) {
    try {
      // TODO: validate the user date of birth format
      return new ResponseEntity<>(this.marketStaffService.saveMarketStaff(user), HttpStatus.OK);
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
  }

  /**
   * Client request to add a new user to the database through a JSON.
   *
   * @param user The new user to be added to the database.
   * @return A new user with an autogenerated id and the Http status. On successful addition of a
   * new user receive a 200 ok response, on failure addition of a new user receive 400 bad request.
   */
  @PostMapping(value = "/add-user-vendor")
  public ResponseEntity<User> addUserVendor(@RequestBody VendorStaff user) {
    try {
      // TODO: validate the user date of birth format
      return new ResponseEntity<>(this.vendorStaffService.saveVendorStaff(user), HttpStatus.OK);
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
  }

  // PUT Request

  /**
   * A user updates relationship where a MarketStaff is associated to 1 Market.
   *
   * @param id The id of the user to be associated with the Market object.
   * @param marketId The id of the Market object.
   * @return The Market assigned to the MarketStaff.
   */
  @PutMapping(value = "/{id}/{market_id}")
  public ResponseEntity<Market> userAddsExistingMarket(@PathVariable("id") @Positive Integer id,
                                                       @PathVariable("market_id") @Positive Integer marketId) {
    try {
      return new ResponseEntity<>(
          this.marketStaffService.userToMarket(id, marketId), HttpStatus.OK);
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
  }

  /**
   * Client request to update the Market Staff user information.
   *
   * @param id The id of the record
   * @param user The new user information to update in the database.
   * @return Returns the MarketStaff with updated information.
   */
  @PutMapping(value = "/update-market-staff/{id}")
  public ResponseEntity<MarketStaff> updateMarketStaff(@PathVariable("id") @Positive Integer id,
                                                       @RequestBody MarketStaff user) {
    try {
      return new ResponseEntity<>(this.marketStaffService.updateUser(id, user), HttpStatus.OK);
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
  }

  /**
   * Client request to update the Vendor Staff user information.
   *
   * @param id The id of the VendorStaff to be updated.
   * @param user The new user information to update in the database.
   * @return Returns the VendorStaff with updated information.
   */
  @PutMapping(value = "/update-vendor-staff/{id}")
  public ResponseEntity<VendorStaff> updateVendorStaff(@PathVariable("id") @Positive Integer id,
                                                       @RequestBody VendorStaff user) {
    try {
      return new ResponseEntity<>(this.vendorStaffService.updateUser(id, user), HttpStatus.OK);
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
  }

  // GET Requests

  /**
   * Client request to get all Users from the database.
   *
   * @return Returns HTTP status, if the request is good or bad, and also returns a list of all
   * users in the database.
   */
  @GetMapping(value = "/all")
  public ResponseEntity<List<User>> getAllUsers() {
    try {
      List<User> users = new ArrayList<>();
      users.addAll(this.marketStaffService.getAllMarketStaff());
      users.addAll(this.vendorStaffService.getAllVendorStaff());
      return new ResponseEntity<>(users, HttpStatus.OK);
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
  }

  /**
   * Client request to get a user from the database when given an id.
   *
   * @param id The id of the user to retrieve the record from the database.
   * @return Returns HTTP status, if the request is good or bad, and also returns a list of all
   * users in the database.
   */
  @GetMapping(value = "/{id}")
  public ResponseEntity<User> getUser(@PathVariable @Min(value = 1) Integer id) {
    try {
      User user = this.userService.getById(id);
      if (user != null) {
      return new ResponseEntity<>(user, HttpStatus.OK);}
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
      return new ResponseEntity<>(HttpStatus.NO_CONTENT);
  }

  /**
   * Client request to get all market staff.
   *
   * @return A list of all market staff.
   */
  @GetMapping(value = "/all-market-staff")
  public ResponseEntity<List<MarketStaff>> getMarketStaff() {
    try {
      List<MarketStaff> marketStaff = this.marketStaffService.getAllMarketStaff();
      if (marketStaff.isEmpty()) {
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
      }
      return new ResponseEntity<>(marketStaff, HttpStatus.OK);
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
  }

  /**
   * Client request to get all vendor staff.
   *
   * @return A list of all vendor staff.
   */
  @GetMapping(value = "/all-vendor-staff")
  public ResponseEntity<List<VendorStaff>> getVendorStaff() {
    try {
      List<VendorStaff> vendorStaff = this.vendorStaffService.getAllVendorStaff();
      if (vendorStaff.isEmpty()) {
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
      }
      return new ResponseEntity<>(vendorStaff, HttpStatus.OK);
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
  }

  // DELETE Request
  /**
   * Client request to delete a user from the database when given an id.
   *
   * @param id the primary key, unique id of the user.
   * @return Returns HTTP status, if the request is good or bad.
   */
  @DeleteMapping(value = "/delete/{id}")
  public ResponseEntity<HttpStatus> deletePlace(@PathVariable("id") @Min(value = 1) Integer id) {
    try {
      this.userService.deleteUser(id);
      return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    } catch (Exception e) {
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    }
  }

}
